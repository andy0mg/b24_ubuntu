<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="K-TEAM LOADTEST">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Импорт пользователей из csv">
        <stringProp name="delimiter">;</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/etc/apache-jmeter-5.6.3/apache-jmeter-5.6.3/bin/users_acron.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">current_user_id,user,pass</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="App config" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="min_delay_write" elementType="Argument">
            <stringProp name="Argument.name">min_delay_write</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">20000 постоянно</stringProp>
          </elementProp>
          <elementProp name="min_delay" elementType="Argument">
            <stringProp name="Argument.name">min_delay</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">20000 постоянно</stringProp>
          </elementProp>
          <elementProp name="delay" elementType="Argument">
            <stringProp name="Argument.name">delay</stringProp>
            <stringProp name="Argument.value">30000</stringProp>
            <stringProp name="Argument.desc">580000 рандом</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay_write" elementType="Argument">
            <stringProp name="Argument.name">delay_write</stringProp>
            <stringProp name="Argument.value">30000</stringProp>
            <stringProp name="Argument.desc">580000 рандом</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="app_ip" elementType="Argument">
            <stringProp name="Argument.name">app_ip</stringProp>
            <stringProp name="Argument.value">portal.glb.akron-holding.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="app_port" elementType="Argument">
            <stringProp name="Argument.name">app_port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="app_schema" elementType="Argument">
            <stringProp name="Argument.name">app_schema</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="app_encoding" elementType="Argument">
            <stringProp name="Argument.name">app_encoding</stringProp>
            <stringProp name="Argument.value">utf-8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ACTIVE_THREADS_OVER_TIME_LOG" elementType="Argument">
            <stringProp name="Argument.name">ACTIVE_THREADS_OVER_TIME_LOG</stringProp>
            <stringProp name="Argument.value">/opt/jmeter/report_${START.YMD}_${START.HMS}\ACTIVE_THREADS_OVER_TIME_LOG_${START.YMD}_${START.HMS}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONNECT_TIMES_OVER_TIME_LOG" elementType="Argument">
            <stringProp name="Argument.name">CONNECT_TIMES_OVER_TIME_LOG</stringProp>
            <stringProp name="Argument.value">/opt/jmeter/report_${START.YMD}_${START.HMS}\CONNECT_TIMES_OVER_TIME_LOG_${START.YMD}_${START.HMS}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESPONSE_CODES_PER_SECOND_LOG" elementType="Argument">
            <stringProp name="Argument.name">RESPONSE_CODES_PER_SECOND_LOG</stringProp>
            <stringProp name="Argument.value">/opt/jmeter/report_${START.YMD}_${START.HMS}\RESPONSE_CODES_PER_SECOND_LOG_${START.YMD}_${START.HMS}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESPONSE_TIME_OVER_TIME_LOG" elementType="Argument">
            <stringProp name="Argument.name">RESPONSE_TIME_OVER_TIME_LOG</stringProp>
            <stringProp name="Argument.value">/opt/jmeter/eport_${START.YMD}_${START.HMS}\RESPONSE_TIME_OVER_TIME_LOG_${START.YMD}_${START.HMS}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TRANSACTIONS_PER_SECOND_LOG" elementType="Argument">
            <stringProp name="Argument.name">TRANSACTIONS_PER_SECOND_LOG</stringProp>
            <stringProp name="Argument.value">/opt/jmeter/report_${START.YMD}_${START.HMS}\TRANSACTIONS_PER_SECOND_LOG_${START.YMD}_${START.HMS}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="profile_user_id" elementType="Argument">
            <stringProp name="Argument.name">profile_user_id</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="search_user_name" elementType="Argument">
            <stringProp name="Argument.name">search_user_name</stringProp>
            <stringProp name="Argument.value">Иванова</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="alphabet" elementType="Argument">
            <stringProp name="Argument.name">alphabet</stringProp>
            <stringProp name="Argument.value">qwertyuiopasdfghjklzxcvbnm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="faq_search" elementType="Argument">
            <stringProp name="Argument.name">faq_search</stringProp>
            <stringProp name="Argument.value">компания</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_photo_path" elementType="Argument">
            <stringProp name="Argument.name">user_photo_path</stringProp>
            <stringProp name="Argument.value">user_photo.png</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_photo_mime" elementType="Argument">
            <stringProp name="Argument.name">user_photo_mime</stringProp>
            <stringProp name="Argument.value">image/png</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="start_user_id" elementType="Argument">
            <stringProp name="Argument.name">start_user_id</stringProp>
            <stringProp name="Argument.value">19</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="finish_user_id" elementType="Argument">
            <stringProp name="Argument.name">finish_user_id</stringProp>
            <stringProp name="Argument.value">10019</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="birthday_user" elementType="Argument">
            <stringProp name="Argument.name">birthday_user</stringProp>
            <stringProp name="Argument.value">6090</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vote_id" elementType="Argument">
            <stringProp name="Argument.name">vote_id</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="question_param" elementType="Argument">
            <stringProp name="Argument.name">question_param</stringProp>
            <stringProp name="Argument.value">vote_radio_2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="question_value" elementType="Argument">
            <stringProp name="Argument.name">question_value</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="news_item_url" elementType="Argument">
            <stringProp name="Argument.name">news_item_url</stringProp>
            <stringProp name="Argument.value">/news/poslednienovosti/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="feedback_theme_id" elementType="Argument">
            <stringProp name="Argument.name">feedback_theme_id</stringProp>
            <stringProp name="Argument.value">134</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="requisite_doc" elementType="Argument">
            <stringProp name="Argument.name">requisite_doc</stringProp>
            <stringProp name="Argument.value">/upload/iblock/457/0nmen98vwnqbftwb3hj79yluqkmzb8gx/%D0%A0%D0%B5%D0%BA%D0%B2%D0%B8%D0%B7%D0%B8%D1%82%D1%8B.docx</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="profile_user_id" elementType="Argument">
            <stringProp name="Argument.name">profile_user_id</stringProp>
            <stringProp name="Argument.value">123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="news_tag" elementType="Argument">
            <stringProp name="Argument.name">news_tag</stringProp>
            <stringProp name="Argument.value">?TAG=%D0%9E%20%D0%BA%D0%BE%D0%BC%D0%BF%D0%B0%D0%BD%D0%B8%D0%B8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="news_id" elementType="Argument">
            <stringProp name="Argument.name">news_id</stringProp>
            <stringProp name="Argument.value">103</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="podid" elementType="Argument">
            <stringProp name="Argument.name">podid</stringProp>
            <stringProp name="Argument.value">156</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="albom_id" elementType="Argument">
            <stringProp name="Argument.name">albom_id</stringProp>
            <stringProp name="Argument.value">132</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="photo_id" elementType="Argument">
            <stringProp name="Argument.name">photo_id</stringProp>
            <stringProp name="Argument.value">107</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="post_id" elementType="Argument">
            <stringProp name="Argument.name">post_id</stringProp>
            <stringProp name="Argument.value">459</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vacancy_id" elementType="Argument">
            <stringProp name="Argument.name">vacancy_id</stringProp>
            <stringProp name="Argument.value">129</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="group_id" elementType="Argument">
            <stringProp name="Argument.name">group_id</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="target_folder_id" elementType="Argument">
            <stringProp name="Argument.name">target_folder_id</stringProp>
            <stringProp name="Argument.value">77</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="group_post_id" elementType="Argument">
            <stringProp name="Argument.name">group_post_id</stringProp>
            <stringProp name="Argument.value">2965</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kb_category_link" elementType="Argument">
            <stringProp name="Argument.name">kb_category_link</stringProp>
            <stringProp name="Argument.value">/knowledge/baza_znaniy_gk_akron/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kb_article_link" elementType="Argument">
            <stringProp name="Argument.name">kb_article_link</stringProp>
            <stringProp name="Argument.value">/wiki_btx/bia/88/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="main_news_links" elementType="Argument">
            <stringProp name="Argument.name">main_news_links</stringProp>
            <stringProp name="Argument.value">/news/ekskursiidlyastudentovnazavodeinvertor/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="albom_link" elementType="Argument">
            <stringProp name="Argument.name">albom_link</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">/mediagallery/339/</stringProp>
          </elementProp>
          <elementProp name="photo_link" elementType="Argument">
            <stringProp name="Argument.name">photo_link</stringProp>
            <stringProp name="Argument.value">/mediagallery/339/10170/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="post_id" elementType="Argument">
            <stringProp name="Argument.name">post_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">8049</stringProp>
          </elementProp>
          <elementProp name="head_user_id" elementType="Argument">
            <stringProp name="Argument.name">head_user_id</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="profile_user_url" elementType="Argument">
            <stringProp name="Argument.name">profile_user_url</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">/company/personal/user/2667/</stringProp>
          </elementProp>
          <elementProp name="faq_section_link" elementType="Argument">
            <stringProp name="Argument.name">faq_section_link</stringProp>
            <stringProp name="Argument.value">/employee/faq/60/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="faq_question_id" elementType="Argument">
            <stringProp name="Argument.name">faq_question_id</stringProp>
            <stringProp name="Argument.value">118</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="faq_search_item_link" elementType="Argument">
            <stringProp name="Argument.name">faq_search_item_link</stringProp>
            <stringProp name="Argument.value">/employee/faq/60/?q=компания#</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VIEW_RESULT_TREE" elementType="Argument">
            <stringProp name="Argument.name">VIEW_RESULT_TREE</stringProp>
            <stringProp name="Argument.value">/opt/jmeter/report_${START.YMD}_${START.HMS}_VRT.xml</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SDW" elementType="Argument">
            <stringProp name="Argument.value">/opt/jmeter/SWD_${START.YMD}_${START.HMS}.xml</stringProp>
            <stringProp name="Argument.name">SDW</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vode_id" elementType="Argument">
            <stringProp name="Argument.name">vode_id</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="AKRON BITRIX KTEAM LOADTEST">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-428127443">
            <stringProp name="1567">10</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48687">120</stringProp>
            <stringProp name="1693857">7800</stringProp>
            <stringProp name="53430">600</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TestPlan.comments">2990 0 7200 7200 600</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">2</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>0.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="false">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${app_schema}://${app_ip}/bitrix/admin/</stringProp>
                <stringProp name="Authorization.username">${user}</stringProp>
                <stringProp name="Authorization.password">${pass}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">true</boolProp>
          </AuthManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Bitrix-Csrf-Token</stringProp>
                <stringProp name="Header.value">${sessid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="PHPSESSID" elementType="Cookie" testname="PHPSESSID">
                <stringProp name="Cookie.value">${sessid}</stringProp>
                <stringProp name="Cookie.domain"></stringProp>
                <stringProp name="Cookie.path"></stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">true</boolProp>
            <stringProp name="CookieManager.policy">compatibility</stringProp>
          </CookieManager>
          <hashTree/>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="false">
            <boolProp name="clearEachIteration">false</boolProp>
            <boolProp name="useExpires">true</boolProp>
            <boolProp name="CacheManager.controlledByThread">true</boolProp>
          </CacheManager>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Авторизация 1 раз" enabled="true"/>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">${app_schema}://${app_ip}/bitrix/admin/</stringProp>
                  <stringProp name="Authorization.username">${user}</stringProp>
                  <stringProp name="Authorization.password">${pass}</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.controlledByThreadGroup">true</boolProp>
            </AuthManager>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
              <stringProp name="RandomTimer.range">15000.0</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1. Авторизация на портале" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.path">/bitrix/admin/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000.0</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BX sessid" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">sessid</stringProp>
                <stringProp name="RegexExtractor.regex">\/admin\/\?logout=yes&amp;amp;sessid=(\w+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${app_schema}://${app_ip}/bitrix/admin/</stringProp>
                <stringProp name="Authorization.username">${user}</stringProp>
                <stringProp name="Authorization.password">${pass}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">true</boolProp>
          </AuthManager>
          <hashTree/>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
            <boolProp name="clearEachIteration">false</boolProp>
            <boolProp name="useExpires">true</boolProp>
            <boolProp name="CacheManager.controlledByThread">false</boolProp>
            <intProp name="maxSize">10000</intProp>
          </CacheManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
            <stringProp name="CookieManager.policy">compatibility</stringProp>
          </CookieManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Bitrix-Csrf-Token</stringProp>
                <stringProp name="Header.value">${sessid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Главная 3%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2. Открыть главную страницу" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/mainpage/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Произвольный пользователь с ДР" enabled="true">
                <stringProp name="HtmlExtractor.refname">birthday_user</stringProp>
                <stringProp name="HtmlExtractor.expr">#kp-birthdays .kp-birthday-user-gift</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-user-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID голосования" enabled="false">
                <stringProp name="HtmlExtractor.refname">vode_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.quiz input[name=VOTE_ID]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Радиобаттон вопроса" enabled="true">
                <stringProp name="HtmlExtractor.refname">question_param</stringProp>
                <stringProp name="HtmlExtractor.expr">.quiz-answers input.base-radio__input</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID ответа" enabled="true">
                <stringProp name="HtmlExtractor.refname">question_value</stringProp>
                <stringProp name="HtmlExtractor.expr">.quiz-answers input.base-radio__input[name=${question_param}]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылки новостей" enabled="true">
                <stringProp name="HtmlExtractor.refname">main_news_links</stringProp>
                <stringProp name="HtmlExtractor.expr">#js-mainpage-section-news .kp-news-item-title .kp-news-item-link</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID новостей" enabled="true">
                <stringProp name="HtmlExtractor.refname">news_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.js-kp-news-item-link</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-entity</stringProp>
                <stringProp name="HtmlExtractor.default">185</stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="key_signer" enabled="true">
                <stringProp name="HtmlExtractor.refname">key_signer</stringProp>
                <stringProp name="HtmlExtractor.expr">.js-kp-news-item-link</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-entity_key_signer</stringProp>
                <stringProp name="HtmlExtractor.default">185</stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BX sessid" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">sessid</stringProp>
                <stringProp name="RegexExtractor.regex">\/auth\/\?logout=yes&amp;sessid=(\w+)&amp;backurl=</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID golos" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">vode_id</stringProp>
                <stringProp name="RegexExtractor.regex">\/news\/vote_new.php?VOTE_ID=(\w+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на диск текущего пользоватлея" enabled="true">
                <stringProp name="HtmlExtractor.refname">current_user_disk_link</stringProp>
                <stringProp name="HtmlExtractor.expr">#bx_left_menu_menu_files</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-link</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID текущего пользователя" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">current_user_id</stringProp>
                <stringProp name="RegexExtractor.regex">\/company\/personal\/user\/(\d+)\/disk\/path\/</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Scope.variable">current_user_disk_link</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID темы обратной связи" enabled="true">
                <stringProp name="HtmlExtractor.refname">feedback_theme_id</stringProp>
                <stringProp name="HtmlExtractor.expr">#js-feedback-form-theme option:not([value=&quot;&quot;])</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID голосования" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">vode_id</stringProp>
                <stringProp name="RegexExtractor.regex">VOTE_ID=(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Scope.variable">vote_link</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">news_id_ex</stringProp>
                <stringProp name="RegexExtractor.regex">IBLOCK_ELEMENT-(...).</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">key_signer</stringProp>
              </RegexExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 66%" enabled="false">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>66.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6. Отправить поздравление пользователю" enabled="false">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/bitrix/components/korus/birthday.cards/ajax.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="FIELDS[CARD_ID]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">36</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">FIELDS[CARD_ID]</stringProp>
                    </elementProp>
                    <elementProp name="FIELDS[USER_ID]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${birthday_user}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">FIELDS[USER_ID]</stringProp>
                    </elementProp>
                    <elementProp name="FIELDS[BIRTH_TEXT]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">:D С днем рождения!</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">FIELDS[BIRTH_TEXT]</stringProp>
                    </elementProp>
                    <elementProp name="send-card" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">send-card</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 33%" enabled="false">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>33.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3. Отправить форму голосования опроса" enabled="false">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">mainpage/</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="AJAX_CALL" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">AJAX_CALL</stringProp>
                    </elementProp>
                    <elementProp name="vote" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">vote</stringProp>
                    </elementProp>
                    <elementProp name="REVOTE_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${vode_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">REVOTE_ID</stringProp>
                    </elementProp>
                    <elementProp name="PUBLIC_VOTE_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${vode_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PUBLIC_VOTE_ID</stringProp>
                    </elementProp>
                    <elementProp name="VOTE_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${vode_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">VOTE_ID</stringProp>
                    </elementProp>
                    <elementProp name="${question_param}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${question_value}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${question_param}</stringProp>
                    </elementProp>
                    <elementProp name="AJAX_POST" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">AJAX_POST</stringProp>
                    </elementProp>
                    <elementProp name="sessid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessid}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessid</stringProp>
                    </elementProp>
                    <elementProp name="revote" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">revote</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Новости 5%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 33%" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>33.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14. Открыть список новостей" enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">pgk-news-item-tag</stringProp>
                <stringProp name="HTTPSampler.path">/news/</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48577877">302		</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">33</intProp>
                </ResponseAssertion>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылки новостей" enabled="true">
                  <stringProp name="HtmlExtractor.refname">news_links</stringProp>
                  <stringProp name="HtmlExtractor.expr">a.news-item__title.news-item-link</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number">-1</stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на тег" enabled="true">
                  <stringProp name="HtmlExtractor.refname">news_tag</stringProp>
                  <stringProp name="HtmlExtractor.expr">a.pgk-news-item-tag</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number">0</stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15. Открыть список новостей, отфильтрованный по тегу" enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/news/${news_tag}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16. Открыть страницу новости" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">${main_news_links}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                <stringProp name="HtmlExtractor.refname">news_id</stringProp>
                <stringProp name="HtmlExtractor.expr">input[name=ENTITY_ID]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.refname">sign_params</stringProp>
                <stringProp name="RegexExtractor.regex">ajax : {&apos;componentName&apos;:&apos;bitrix:forum.comments&apos;,&apos;processComment&apos;:true,&apos;navigateComment&apos;:true,&apos;getComment&apos;:true,&apos;readComment&apos;:true,&apos;params&apos;:&apos;(.+?)&apos;</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 33%" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>33.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18. Отправить комментарий к новости" enabled="true">
                <stringProp name="TestPlan.comments">YToxODp7czoxMzoiQUxMT1dfTUVOVElPTiI7czoxOiJZIjtzOjE2OiJEQVRFX1RJTUVfRk9STUFUIjtzOjExOiJkLm0uWSBIOmk6cyI7czoxOToiRURJVE9SX0NPREVfREVGQVVMVCI7czoxOiJOIjtzOjk6IkVOVElUWV9JRCI7czozOiIxMDMiO3M6MTE6IkVOVElUWV9UWVBFIjtzOjI6Ik5XIjtzOjEzOiJFTlRJVFlfWE1MX0lEIjtzOjg6Ik5FV1NfMTAzIjtzOjg6IkZPUlVNX0lEIjtzOjE6IjEiO3M6MTU6IklNQUdFX0hUTUxfU0laRSI7czoxOiIwIjtzOjEwOiJJTUFHRV9TSVpFIjtzOjM6IjYwMCI7czoxNzoiTUVTU0FHRVNfUEVSX1BBR0UiO3M6MToiMyI7czoxMzoiTkFNRV9URU1QTEFURSI7czowOiIiO3M6MjQ6IlBBR0VfTkFWSUdBVElPTl9URU1QTEFURSI7czowOiIiO3M6ODoiUFJFT1JERVIiO3M6MToiWSI7czoxMToiU0hPV19SQVRJTkciO3M6MToiWSI7czoyNDoiU1VCU0NSSUJFX0FVVEhPUl9FTEVNRU5UIjtzOjE6Ik4iO3M6MjY6IlVSTF9URU1QTEFURVNfUFJPRklMRV9WSUVXIjtzOjM1OiIvY29tcGFueS9wZXJzb25hbC91c2VyLyNBVVRIT1JfSUQjLyI7czoxODoiVVJMX1RFTVBMQVRFU19SRUFEIjtzOjA6IiI7czoxMToiVVNFUl9GSUVMRFMiO2E6Mzp7aTowO3M6MjA6IlVGX0ZPUlVNX01FU1NBR0VfRE9DIjtpOjE7czoyMDoiVUZfRk9SVU1fTUVTU0FHRV9WRVIiO2k6MjtzOjIwOiJVRl9GT1JVTV9NRVNfVVJMX1BSViI7fX0=.f54fdd0c5659c2694b262354cca9e00c9e4bcc3a5497ae1cf2e6adca80735ed2</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/bitrix/services/main/ajax.php?mode=class&amp;c=bitrix%3Aforum.comments&amp;action=processComment</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ENTITY_XML_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">NEWS_${news_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ENTITY_XML_ID</stringProp>
                    </elementProp>
                    <elementProp name="ENTITY_TYPE" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">NW</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ENTITY_TYPE</stringProp>
                    </elementProp>
                    <elementProp name="ENTITY_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${news_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ENTITY_ID</stringProp>
                    </elementProp>
                    <elementProp name="sessid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessid}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessid</stringProp>
                    </elementProp>
                    <elementProp name="REVIEW_USE_SMILES" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">REVIEW_USE_SMILES</stringProp>
                    </elementProp>
                    <elementProp name="comment_review" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">comment_review</stringProp>
                    </elementProp>
                    <elementProp name="REVIEW_TEXT" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Тестовый комментарий</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">REVIEW_TEXT</stringProp>
                    </elementProp>
                    <elementProp name="hidden_focus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">hidden_focus</stringProp>
                    </elementProp>
                    <elementProp name="UF_FORUM_MESSAGE_DOC[0]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_FORUM_MESSAGE_DOC[0]</stringProp>
                    </elementProp>
                    <elementProp name="FORUM_MESSAGE_DISK_ATTACHED_OBJECT_ALLOW_EDIT" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">FORUM_MESSAGE_DISK_ATTACHED_OBJECT_ALLOW_EDIT</stringProp>
                    </elementProp>
                    <elementProp name="FORUM_MESSAGE_DISK_ATTACHED_OBJECT_TEMPLATE_VIEW" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">gallery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">FORUM_MESSAGE_DISK_ATTACHED_OBJECT_TEMPLATE_VIEW</stringProp>
                    </elementProp>
                    <elementProp name="NOREDIRECT" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">NOREDIRECT</stringProp>
                    </elementProp>
                    <elementProp name="MODE" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">RECORD</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">MODE</stringProp>
                    </elementProp>
                    <elementProp name="AJAX_POST" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">AJAX_POST</stringProp>
                    </elementProp>
                    <elementProp name="id[0]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">NEWS_${news_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">id[0]</stringProp>
                    </elementProp>
                    <elementProp name="id[1]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">id[1]</stringProp>
                    </elementProp>
                    <elementProp name="SITE_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">s1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">SITE_ID</stringProp>
                    </elementProp>
                    <elementProp name="LANGUAGE_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ru</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">LANGUAGE_ID</stringProp>
                    </elementProp>
                    <elementProp name="ACTION" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ADD</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ACTION</stringProp>
                    </elementProp>
                    <elementProp name="EXEMPLAR_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1_eJghOG</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">EXEMPLAR_ID</stringProp>
                    </elementProp>
                    <elementProp name="OPERATION_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">sn179wp9sqx3egfok0r9</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">OPERATION_ID</stringProp>
                    </elementProp>
                    <elementProp name="signedParameters" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sign_params_g1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">signedParameters</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Bitrix-Csrf-Token</stringProp>
                      <stringProp name="Header.value">${sessid}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Bx-ajax</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Bitrix-Site-Id</stringProp>
                      <stringProp name="Header.value">s1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-KL-Ajax-Request</stringProp>
                      <stringProp name="Header.value">Ajax_Request</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 33%" enabled="false">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>33.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10. Просмотр видео" enabled="false">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/disk/showFile/10163/?&amp;ncc=1&amp;ts=1694016136&amp;filename=K-Team+-+%D0%BF%D0%BB%D0%B0%D1%82%D1%84%D0%BE%D1%80%D0%BC%D0%B0+%D0%B4%D0%BB%D1%8F+%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D1%8F.mp4</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Bitrix-Csrf-Token</stringProp>
                      <stringProp name="Header.value">${sessid}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 66%" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>33.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="17. Поставить лайк (новость)" enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/bitrix/services/main/ajax.php?analyticsLabel[b24statAction]=addLike&amp;action=main.rating.vote</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="params[RATING_VOTE_TYPE_ID]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">IBLOCK_ELEMENT</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">params[RATING_VOTE_TYPE_ID]</stringProp>
                    </elementProp>
                    <elementProp name="params[RATING_VOTE_ENTITY_ID]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${news_id_ex}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">params[RATING_VOTE_ENTITY_ID]</stringProp>
                    </elementProp>
                    <elementProp name="params[RATING_VOTE_KEY_SIGNED]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${key_signer}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">params[RATING_VOTE_KEY_SIGNED]</stringProp>
                    </elementProp>
                    <elementProp name="params[RATING_VOTE_ACTION]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">plus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">params[RATING_VOTE_ACTION]</stringProp>
                    </elementProp>
                    <elementProp name="params[RATING_VOTE_REACTION]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">like</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">params[RATING_VOTE_REACTION]</stringProp>
                    </elementProp>
                    <elementProp name="sessid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessid</stringProp>
                      <stringProp name="Argument.value">${sessid}</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Bitrix-Csrf-Token</stringProp>
                      <stringProp name="Header.value">${sessid}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Bx-ajax</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Bitrix-Site-Id</stringProp>
                      <stringProp name="Header.value">s1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-KL-Ajax-Request</stringProp>
                      <stringProp name="Header.value">Ajax_Request</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">emoty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller О компании 5%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="19. Открыть страницу «О холдинге»." enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/about/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Определяем id произвольного руководителя" enabled="true">
                <stringProp name="HtmlExtractor.refname">head_user_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.ca-manager-card a.ca-manager-card-name</stringProp>
                <stringProp name="HtmlExtractor.attribute">bx-tooltip-user-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на документ с реквизитами" enabled="true">
                <stringProp name="HtmlExtractor.refname">requisite_doc</stringProp>
                <stringProp name="HtmlExtractor.expr">.ca-section-header .ca-section-title + a.ui-btn</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 60%" enabled="false">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>60.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="19. Открыть страницу «О холдинге»" enabled="false">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/company/about/</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48577877">302		</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">33</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Оргструктура 1%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="26. Открыть страницу «Структура компании»" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/vis_structure.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Выбираем рандомное подразделение" enabled="true">
                <stringProp name="HtmlExtractor.refname">podid</stringProp>
                <stringProp name="HtmlExtractor.expr">#js-structure-list .listitem a</stringProp>
                <stringProp name="HtmlExtractor.attribute">id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="27. Открыть структуру в представлении «Список»" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/vis_structure.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="viewType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">table</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">viewType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28. Открыть структуру, отфильтрованную по подразделению" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/vis_structure.php?department=${podid}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="29. Поиск по ФИО" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/vis_structure.php?department=1&amp;page=&amp;filter[generalSearch]=Иванов&amp;filter[name]=&amp;filter[position]=&amp;search=Искать</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="URL пользователя" enabled="true">
                <stringProp name="HtmlExtractor.refname">profile_user_url</stringProp>
                <stringProp name="HtmlExtractor.expr">.drevo_users .user-fio a</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID пользователя" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">profile_user_id</stringProp>
                <stringProp name="RegexExtractor.regex">\/company\/personal\/user\/(\d+)\/</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">profile_user_url</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Адресная книга 5%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12. Открыть страницу «Адресная книга»" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13. Поиск по ФИО" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/vis_structure.php?department=1&amp;page=&amp;filter[generalSearch]=Иванов&amp;filter[name]=&amp;filter[position]=&amp;search=Искать</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="URL пользователя" enabled="true">
                <stringProp name="HtmlExtractor.refname">profile_user_url</stringProp>
                <stringProp name="HtmlExtractor.expr">.drevo_users .user-fio a</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID пользователя" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">profile_user_id</stringProp>
                <stringProp name="RegexExtractor.regex">\/company\/personal\/user\/(\d+)\/</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">profile_user_url</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Облако 5%" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="19. Перейти в раздел «Документы» (Диск)." enabled="false">
              <stringProp name="TestPlan.comments">current_user_id</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/personal/user/${current_user_id}/disk/path/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ID папки" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.folder.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID папки" enabled="false">
                <stringProp name="HtmlExtractor.refname">target_folder_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.disk-breadcrumbs-item-title</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-object-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">-1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="20. Открыть раздел Диска «Общий диск»." enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/docs/shared/?clear_cache=Y</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="URL папки" enabled="true">
                <stringProp name="HtmlExtractor.refname">disk_folder_url</stringProp>
                <stringProp name="HtmlExtractor.expr">a.bx-disk-folder-title.js-disk-grid-folder</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID папки" enabled="true">
                <stringProp name="HtmlExtractor.refname">target_folder_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.disk-breadcrumbs-item-title</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-object-id</stringProp>
                <stringProp name="HtmlExtractor.default">3</stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на скачивание файла" enabled="true">
                <stringProp name="HtmlExtractor.refname">file_link</stringProp>
                <stringProp name="HtmlExtractor.expr">span.bx-disk-folder-title[data-src]</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-src</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">-1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="21. Скачать файл" enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/disk/downloadFile/68/?&amp;ncc=1&amp;filename=%D0%9F%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%BE%D0%B5+%D1%81%D0%BE%D0%B3%D0%BB%D0%B0%D1%88%D0%B5%D0%BD%D0%B8%D0%B5+%D0%B4%D0%BB%D1%8F+%D0%BA%D0%BE%D1%80%D0%BF%D0%BE%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B3%D0%BE+%D1%81%D0%B0%D0%B8%CC%86%D1%82%D0%B0+intranet.dellin.ru.pdf</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="22. Загрузить файл" enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/bitrix/components/bitrix/disk.file.upload/ajax.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="test_doc.docx" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    <stringProp name="File.path">test_doc.docx</stringProp>
                    <stringProp name="File.paramname">bxu_files[file1687765087817][default]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="bxu_files[file1687765087817][name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__RandomString(10, ${alphabet}, filename)}.docx</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_files[file1687765087817][name]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_files[file1687765087817][type]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_files[file1687765087817][type]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_files[file1687765087817][size]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6806</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_files[file1687765087817][size]</stringProp>
                  </elementProp>
                  <elementProp name="targetFolderId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${target_folder_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">targetFolderId</stringProp>
                  </elementProp>
                  <elementProp name="AJAX_POST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAX_POST</stringProp>
                  </elementProp>
                  <elementProp name="USER_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${current_user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">USER_ID</stringProp>
                  </elementProp>
                  <elementProp name="sessid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessid</stringProp>
                  </elementProp>
                  <elementProp name="SITE_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">s1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SITE_ID</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[controlId]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">bitrixUploader</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[controlId]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[CID]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">CID1687735916198</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[CID]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[uploadInputName]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">bxu_files</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[uploadInputName]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[version]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[version]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[packageIndex]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">pIndex1687764936413</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[packageIndex]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[mode]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">upload</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[mode]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[filesCount]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[filesCount]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ID файла" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">file_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.files.*.file.fileId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="21b. Загрузить файл" enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/bitrix/components/bitrix/disk.file.upload/ajax.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="test_doc.docx" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    <stringProp name="File.path">test_doc.docx</stringProp>
                    <stringProp name="File.paramname">bxu_files[file1687765087817][default]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="bxu_files[file1687765087817][name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__RandomString(10, ${alphabet})}.docx</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_files[file1687765087817][name]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_files[file1687765087817][type]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_files[file1687765087817][type]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_files[file1687765087817][size]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6806</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_files[file1687765087817][size]</stringProp>
                  </elementProp>
                  <elementProp name="targetFolderId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${target_folder_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">targetFolderId</stringProp>
                  </elementProp>
                  <elementProp name="AJAX_POST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAX_POST</stringProp>
                  </elementProp>
                  <elementProp name="USER_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${current_user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">USER_ID</stringProp>
                  </elementProp>
                  <elementProp name="sessid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessid</stringProp>
                  </elementProp>
                  <elementProp name="SITE_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">s1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SITE_ID</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[controlId]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">bitrixUploader</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[controlId]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[CID]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">CID1687735916199</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[CID]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[uploadInputName]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">bxu_files</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[uploadInputName]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[version]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[version]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[packageIndex]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">pIndex1687764936414</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[packageIndex]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[mode]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">upload</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[mode]</stringProp>
                  </elementProp>
                  <elementProp name="bxu_info[filesCount]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bxu_info[filesCount]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ID файла" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">file_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.files.*.file.fileId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">30000</stringProp>
                <stringProp name="RandomTimer.range">60000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Опросы 1%" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="23. Открыть список опросов" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/news/vote_list.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на опрос" enabled="true">
                <stringProp name="HtmlExtractor.refname">vote_link</stringProp>
                <stringProp name="HtmlExtractor.expr">.vote-item-links a</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID голосования" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">vote_id</stringProp>
                <stringProp name="RegexExtractor.regex">VOTE_ID=(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">vote_link</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="24. Открыть страницу опроса" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/news/vote_new.php?VOTE_ID=${vote_id}&amp;revote=Y</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="AJAX_CALL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAX_CALL</stringProp>
                  </elementProp>
                  <elementProp name="vote" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">vote</stringProp>
                  </elementProp>
                  <elementProp name="REVOTE_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vote_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">REVOTE_ID</stringProp>
                  </elementProp>
                  <elementProp name="PUBLIC_VOTE_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vote_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">PUBLIC_VOTE_ID</stringProp>
                  </elementProp>
                  <elementProp name="VOTE_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vote_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">VOTE_ID</stringProp>
                  </elementProp>
                  <elementProp name="${question_param}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${question_value}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">${question_param}</stringProp>
                  </elementProp>
                  <elementProp name="AJAX_POST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAX_POST</stringProp>
                  </elementProp>
                  <elementProp name="sessid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessid</stringProp>
                  </elementProp>
                  <elementProp name="revote" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">revote</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="25. Отправить форму голосования" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/news/vote_new.php?VOTE_ID=${vote_id}&amp;revote=Y</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Радиобаттон вопроса" enabled="true">
                <stringProp name="HtmlExtractor.refname">question_param</stringProp>
                <stringProp name="HtmlExtractor.expr">.vote-answers-list input.main-ui-radio-input</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID ответа" enabled="true">
                <stringProp name="HtmlExtractor.refname">question_value</stringProp>
                <stringProp name="HtmlExtractor.expr">.vote-answers-list input.main-ui-radio-input[name=${question_param}]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Медиагаллерея 2%" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="26. Открыть страницу «Медиагалерея»" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/mediagallery/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на альбом" enabled="true">
                <stringProp name="HtmlExtractor.refname">albom_link</stringProp>
                <stringProp name="HtmlExtractor.expr">.photo-album-name &gt; a</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="27. Открыть страницу альбома" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">${albom_link}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на фото" enabled="true">
                <stringProp name="HtmlExtractor.refname">photo_link</stringProp>
                <stringProp name="HtmlExtractor.expr">.photo-item-inner</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на видео" enabled="true">
                <stringProp name="HtmlExtractor.refname">video_link</stringProp>
                <stringProp name="HtmlExtractor.expr">.photo-item-video</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Фото 50%" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>50.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28. Открыть фото" enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">${photo_link}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID альбома" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">albom_id</stringProp>
                  <stringProp name="RegexExtractor.regex">\/mediagallery\/(\d+)\/\d+\/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">photo_link</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID фото" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">photo_id</stringProp>
                  <stringProp name="RegexExtractor.regex">\/mediagallery\/\d+\/(\d+)\/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">photo_link</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48577877">302		</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">33</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Видео 50%" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>50.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="29. Открыть видео" enabled="true">
                <stringProp name="TestPlan.comments">${video_link}</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/mediagallery/11/16019/</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID альбома" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">albom_id</stringProp>
                  <stringProp name="RegexExtractor.regex">\/mediagallery\/(\d+)\/\d+\/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">photo_link</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID фото" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">photo_id</stringProp>
                  <stringProp name="RegexExtractor.regex">\/mediagallery\/\d+\/(\d+)\/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">photo_link</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="30. Эмулировать просмотр видео" enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/upload/disk/c3b/nhanblvjuxxegna838tf75kchjth1f8a</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Блогосфера 3%" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>3.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="31. Открыть страницу «Благодарности»" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/news/stream/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID рандомного поста" enabled="false">
                <stringProp name="HtmlExtractor.refname">post_id</stringProp>
                <stringProp name="HtmlExtractor.expr">a.feed-inform-item.feed-post-more-link</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-bx-post-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 33%" enabled="false">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>33.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="31. Отправить сообщение в ленте" enabled="false">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/workgroups/group/${group_id}/blog/?b24statAction=addLogEntry</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="show_title" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">N</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">show_title</stringProp>
                    </elementProp>
                    <elementProp name="sessid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessid}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessid</stringProp>
                    </elementProp>
                    <elementProp name="POST_TITLE" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">POST_TITLE</stringProp>
                    </elementProp>
                    <elementProp name="POST_MESSAGE" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__RandomString(32, ${alphabet})}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">POST_MESSAGE</stringProp>
                    </elementProp>
                    <elementProp name="hidden_focus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">hidden_focus</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_FILE[]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_FILE[]</stringProp>
                    </elementProp>
                    <elementProp name="BLOG_POST_DISK_ATTACHED_OBJECT_ALLOW_EDIT" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">BLOG_POST_DISK_ATTACHED_OBJECT_ALLOW_EDIT</stringProp>
                    </elementProp>
                    <elementProp name="BLOG_POST_DISK_ATTACHED_OBJECT_TEMPLATE_VIEW" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">gallery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">BLOG_POST_DISK_ATTACHED_OBJECT_TEMPLATE_VIEW</stringProp>
                    </elementProp>
                    <elementProp name="BLOG_POST_DISK_ATTACHED_OBJECT_TEMPLATE_VIEW" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grid</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">BLOG_POST_DISK_ATTACHED_OBJECT_TEMPLATE_VIEW</stringProp>
                    </elementProp>
                    <elementProp name="TAGS" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">,</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TAGS</stringProp>
                    </elementProp>
                    <elementProp name="TAGS_blogPostForm" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">TAGS_blogPostForm</stringProp>
                    </elementProp>
                    <elementProp name="DEST_DATA" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[[&quot;project&quot;,${group_id}]]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">DEST_DATA</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">n0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[ID]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[ID]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[URL]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[URL]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][QUESTION]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][QUESTION]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][C_SORT]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">10</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][C_SORT]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][QUESTION_TYPE]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">text</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][QUESTION_TYPE]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][0][MESSAGE]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][0][MESSAGE]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][0][MESSAGE_TYPE]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">text</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][0][MESSAGE_TYPE]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][0][C_SORT]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">10</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][0][C_SORT]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][0][FIELD_TYPE]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][0][FIELD_TYPE]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][1][MESSAGE]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][1][MESSAGE]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][1][MESSAGE_TYPE]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">text</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][1][MESSAGE_TYPE]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][1][C_SORT]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">20</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][1][C_SORT]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][1][FIELD_TYPE]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][ANSWERS][1][FIELD_TYPE]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][FIELD_TYPE]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[QUESTIONS][0][FIELD_TYPE]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[ANONYMITY]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[ANONYMITY]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_VOTE_n0_DATA[OPTIONS][]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_VOTE_n0_DATA[OPTIONS][]</stringProp>
                    </elementProp>
                    <elementProp name="UF_BLOG_POST_IMPRTNT" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_BLOG_POST_IMPRTNT</stringProp>
                    </elementProp>
                    <elementProp name="UF_IMPRTANT_DATE_END_SAVED" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_IMPRTANT_DATE_END_SAVED</stringProp>
                    </elementProp>
                    <elementProp name="UF_IMPRTANT_DATE_END" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">UF_IMPRTANT_DATE_END</stringProp>
                    </elementProp>
                    <elementProp name="postShowingDuration" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">WEEK</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">postShowingDuration</stringProp>
                    </elementProp>
                    <elementProp name="GRAT_TYPE" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">thumbsup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GRAT_TYPE</stringProp>
                    </elementProp>
                    <elementProp name="GRAT_DEST_DATA" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">GRAT_DEST_DATA</stringProp>
                    </elementProp>
                    <elementProp name="blog_upload_cid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">blog_upload_cid</stringProp>
                    </elementProp>
                    <elementProp name="changePostFormTab" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">message</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">changePostFormTab</stringProp>
                    </elementProp>
                    <elementProp name="save" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">save</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">30000</stringProp>
                  <stringProp name="RandomTimer.range">60000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Вопрос-ответ 3%" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>3.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="32. Открыть страницу «Вопрос-ответ»" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/faq/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на раздел" enabled="true">
                <stringProp name="HtmlExtractor.refname">faq_section_link</stringProp>
                <stringProp name="HtmlExtractor.expr">a.faq-section-link</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="33. Открыть страницу категории вопросов" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">${faq_section_link}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ID вопроса" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">faq_question_id</stringProp>
                <stringProp name="RegexExtractor.regex">bx-rating-IBLOCK_ELEMENT-(\d+)-</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.default"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="key_signer" enabled="true">
                <stringProp name="HtmlExtractor.refname">key_signer_que</stringProp>
                <stringProp name="HtmlExtractor.expr">.bx-ilike-button</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-vote-key-signed</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">faq_question_id_ex</stringProp>
                <stringProp name="RegexExtractor.regex">IBLOCK_ELEMENT-(...).</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">key_signer_que</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 33%" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>33.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="34. Отправить лайк" enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/bitrix/components/bitrix/rating.vote/vote.ajax.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="RATING_VOTE" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">RATING_VOTE</stringProp>
                    </elementProp>
                    <elementProp name="RATING_RESULT" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Y</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">RATING_RESULT</stringProp>
                    </elementProp>
                    <elementProp name="RATING_VOTE_TYPE_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">IBLOCK_ELEMENT</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">RATING_VOTE_TYPE_ID</stringProp>
                    </elementProp>
                    <elementProp name="RATING_VOTE_KEY_SIGNED" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${key_signer_que}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">RATING_VOTE_KEY_SIGNED</stringProp>
                    </elementProp>
                    <elementProp name="RATING_VOTE_ENTITY_ID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${faq_question_id_ex}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">RATING_VOTE_ENTITY_ID</stringProp>
                    </elementProp>
                    <elementProp name="RATING_VOTE_ACTION" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">plus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">RATING_VOTE_ACTION</stringProp>
                    </elementProp>
                    <elementProp name="sessid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessid}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessid</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="35. Отправить форму вопроса" enabled="false">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/company/faq/</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="sessid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessid}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessid</stringProp>
                    </elementProp>
                    <elementProp name="PROPERTY[IBLOCK_SECTION][]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PROPERTY[IBLOCK_SECTION][]</stringProp>
                    </elementProp>
                    <elementProp name="PROPERTY[NAME][0]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Что означает ${__RandomString(32, ${alphabet})}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">PROPERTY[NAME][0]</stringProp>
                    </elementProp>
                    <elementProp name="iblock_submit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Отправить</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">iblock_submit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="35. Поиск по ключевому слову" enabled="true">
                <stringProp name="TestPlan.comments">&amp;where=&amp;how=d</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/company/faq/?q=${faq_search}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="36. Поиск с сортировкой по дате" enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/company/faq/?q=${faq_search}&amp;where=&amp;how=d</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Ссылка на результат выдачи" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">faq_search_item_link</stringProp>
                  <stringProp name="RegexExtractor.regex">document\.location=&apos;(\/company\/faq\/\d+\/\d+\/\?sphrase_id=\d+&apos;)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="38. Открыть детальную страницу вопроса" enabled="false">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">${faq_search_item_link}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48577877">302		</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">33</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Дни рождения 3%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>3.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="30. Открыть страницу «Дни рождения»" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/news/birthdays.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID пользователя" enabled="true">
                <stringProp name="HtmlExtractor.refname">birthday_user_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.bx-user-info-big a.base-link</stringProp>
                <stringProp name="HtmlExtractor.attribute">bx-tooltip-user-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller 66%" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>66.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="31. Отправить сообщение в чат пользователю" enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/bitrix/components/korus/birthday.cards/ajax.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="FIELDS[CARD_ID]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">36</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">FIELDS[CARD_ID]</stringProp>
                    </elementProp>
                    <elementProp name="FIELDS[USER_ID]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${birthday_user_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">FIELDS[USER_ID]</stringProp>
                    </elementProp>
                    <elementProp name="FIELDS[BIRTH_TEXT]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">С днем рождения!</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">FIELDS[BIRTH_TEXT]</stringProp>
                    </elementProp>
                    <elementProp name="send-card" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">send-card</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                  <stringProp name="RandomTimer.range">${delay}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Свой профиль 2%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7. Открыть свой профиль" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/company/personal/user/${current_user_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="8. Добавить навык сотрудника в блок «Компетенции»." enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="42.1. Добавить навык сотрудника." enabled="true">
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
                <stringProp name="HTTPSampler.port">${app_port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
                <stringProp name="HTTPSampler.path">/api/v1/employees/${current_user_id}/competencies</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="tag" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__RandomString(10, ${alphabet})}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tag</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="42.2. Заполнить блок «Статус моего отсутствия»." enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/employees/${current_user_id}/absence</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="data[text]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__RandomString(32, ${alphabet})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">data[text]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="9. Заполнить блок «Обо мне»." enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/employees/${current_user_id}/about</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="data[text]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__RandomString(32, ${alphabet})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">data[text]</stringProp>
                  </elementProp>
                  <elementProp name="data[additionalData][profilepost]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__RandomString(32, ${alphabet})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">data[additionalData][profilepost]</stringProp>
                  </elementProp>
                  <elementProp name="data[additionalData][hidden_focus]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">data[additionalData][hidden_focus]</stringProp>
                  </elementProp>
                  <elementProp name="data[additionalData][UF_BLOG_POST_FILE][]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">data[additionalData][UF_BLOG_POST_FILE][]</stringProp>
                  </elementProp>
                  <elementProp name="data[additionalData][BLOG_POST_DISK_ATTACHED_OBJECT_TEMPLATE_VIEW]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grid</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">data[additionalData][BLOG_POST_DISK_ATTACHED_OBJECT_TEMPLATE_VIEW]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10. Заполнить блок «Мои интересы»." enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/employees/${current_user_id}/interests?tag=${__RandomString(10, ${alphabet})}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11. Указать emoji статус." enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/employees/${current_user_id}/emoji/${__Random(34,50)}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Обратная связь 1%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="34. Отправить форму «Обратная связь» с прикрепленным файлом" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/bitrix/components/korus/feedback/ajax.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${user_photo_path}" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">${user_photo_mime}</stringProp>
                    <stringProp name="File.path">${user_photo_path}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="theme" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${feedback_theme_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">theme</stringProp>
                  </elementProp>
                  <elementProp name="text" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__RandomString(32, ${alphabet})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">text</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Вакансии 2%" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="41. Открыть страницу «Вакансии»" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/board/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID вакансии" enabled="true">
                <stringProp name="HtmlExtractor.refname">vacancy_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.vacation-details__button-content a.respond_vacancy</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="42. Отправить отклик на вакансию" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/board/ajax/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="FB_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">FB_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="VACANCY_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vacancy_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">VACANCY_ID</stringProp>
                  </elementProp>
                  <elementProp name="JSON" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">JSON</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="43. Отправить форму рекомендации на вакансию" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/board/ajax/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${user_photo_path}" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">${user_photo_mime}</stringProp>
                    <stringProp name="File.path">${user_photo_path}</stringProp>
                    <stringProp name="File.paramname">PROP_111</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="GET_HTML" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">GET_HTML</stringProp>
                  </elementProp>
                  <elementProp name="PROP[107]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vacancy_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">PROP[107]</stringProp>
                  </elementProp>
                  <elementProp name="PROP[108]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Иванов Иван Иванович</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">PROP[108]</stringProp>
                  </elementProp>
                  <elementProp name="PROP[109]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">+71234567890</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">PROP[109]</stringProp>
                  </elementProp>
                  <elementProp name="PROP[110]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">комментарий</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">PROP[110]</stringProp>
                  </elementProp>
                  <elementProp name="FB_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">FB_SUBMIT</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller Группы 2%" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="44. Открыть страницу групп и сообществ" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/workgroups/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID группы" enabled="true">
                <stringProp name="HtmlExtractor.refname">group_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.main-grid-row-body[data-type=&quot;workgroup&quot;]</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="45. Перейти в группу" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/workgroups/group/${group_id}/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="46 Открыть страницу Диск группы" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/workgroups/group/${group_id}/disk/path/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID объекта диска" enabled="true">
                <stringProp name="HtmlExtractor.refname">target_folder_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.disk-breadcrumbs-item-title</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-object-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Открыть групповой чат" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/rest/im.recent.list.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">text/plain</stringProp>
                    <stringProp name="Argument.name">sessid</stringProp>
                  </elementProp>
                  <elementProp name="SKIP_OPENLINES" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SKIP_OPENLINES</stringProp>
                  </elementProp>
                  <elementProp name="LIMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">50</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">LIMIT</stringProp>
                  </elementProp>
                  <elementProp name="GET_ORIGINAL_TEXT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">GET_ORIGINAL_TEXT</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID объекта диска" enabled="true">
                <stringProp name="HtmlExtractor.refname">target_folder_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.disk-breadcrumbs-item-title</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-object-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Добавить сообщение в чат" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/bitrix/components/bitrix/im.messenger/im.ajax.php?MESSAGE_SEND&amp;V=130&amp;logTag=im.message.add&amp;timType=sonetGroup&amp;timDevice=web</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">text/plain</stringProp>
                    <stringProp name="Argument.name">sessid</stringProp>
                  </elementProp>
                  <elementProp name="IM_SEND_MESSAGE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">IM_SEND_MESSAGE</stringProp>
                  </elementProp>
                  <elementProp name="CHAT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">CHAT</stringProp>
                  </elementProp>
                  <elementProp name="ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">temp3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ID</stringProp>
                  </elementProp>
                  <elementProp name="RECIPIENT_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">chat539</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">RECIPIENT_ID</stringProp>
                  </elementProp>
                  <elementProp name="MESSAGE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">test chat message</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">MESSAGE</stringProp>
                  </elementProp>
                  <elementProp name="OL_SILENT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">N</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">OL_SILENT</stringProp>
                  </elementProp>
                  <elementProp name="TAB" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">chat539</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">TAB</stringProp>
                  </elementProp>
                  <elementProp name="IM_AJAX_CALL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">IM_AJAX_CALL</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID объекта диска" enabled="true">
                <stringProp name="HtmlExtractor.refname">target_folder_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.disk-breadcrumbs-item-title</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-object-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">message_id</stringProp>
                <stringProp name="RegexExtractor.regex">&apos;ID&apos;:&apos;(\d+)&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Отправить лайк на сообщение" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/bitrix/components/bitrix/im.messenger/im.ajax.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">text/plain</stringProp>
                    <stringProp name="Argument.name">sessid</stringProp>
                  </elementProp>
                  <elementProp name="IM_LIKE_MESSAGE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">IM_LIKE_MESSAGE</stringProp>
                  </elementProp>
                  <elementProp name="ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${message_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ID</stringProp>
                  </elementProp>
                  <elementProp name="ACTION" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">plus</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ACTION</stringProp>
                  </elementProp>
                  <elementProp name="IM_AJAX_CALL" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">IM_AJAX_CALL</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ID объекта диска" enabled="true">
                <stringProp name="HtmlExtractor.refname">target_folder_id</stringProp>
                <stringProp name="HtmlExtractor.expr">.disk-breadcrumbs-item-title</stringProp>
                <stringProp name="HtmlExtractor.attribute">data-object-id</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="49. Создать папку." enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/bitrix/components/bitrix/disk.folder.list/ajax.php?action=addFolder</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="targetFolderId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${target_folder_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">targetFolderId</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__RandomString(10, ${alphabet}, folder_name)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="SITE_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">s1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SITE_ID</stringProp>
                  </elementProp>
                  <elementProp name="sessid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ID папки" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">folder_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.folder.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="50. Открыть папку" enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">/workgroups/group/${group_id}/disk/path/${folder_name}/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller База знаний 3%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>3.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="25. Открыть базу знаний" enabled="true">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">${kb_category_link}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="test_doc.docx" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    <stringProp name="File.path">test_doc.docx</stringProp>
                    <stringProp name="File.paramname">bxu_files[file1687765087817][default]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Ссылка на статью базы знаний" enabled="true">
                <stringProp name="HtmlExtractor.refname">kb_article_link</stringProp>
                <stringProp name="HtmlExtractor.expr">.news_list &gt; .link_click</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number">0</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="52. Открыть раздел базы знаний" enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${app_encoding}</stringProp>
              <stringProp name="HTTPSampler.path">${kb_article_link}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="test_doc.docx" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    <stringProp name="File.path">test_doc.docx</stringProp>
                    <stringProp name="File.paramname">bxu_files[file1687765087817][default]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="48577877">302		</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="53. Отправить лайк на сообщение (БЗ)" enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.path">/local/modules/korus.wiki/ajax/korus.wiki/like.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">88</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                    <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="54. Добавить сообщение в чат (БЗ)" enabled="false">
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${app_ip}</stringProp>
              <stringProp name="HTTPSampler.port">${app_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${app_schema}</stringProp>
              <stringProp name="HTTPSampler.path">/wiki_btx/bia/88/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="index" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1ptB</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">index</stringProp>
                  </elementProp>
                  <elementProp name="back_page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">back_page</stringProp>
                    <stringProp name="Argument.value">/wiki_btx/bia/88/</stringProp>
                  </elementProp>
                  <elementProp name="ELEMENT_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ELEMENT_ID</stringProp>
                    <stringProp name="Argument.value">88</stringProp>
                  </elementProp>
                  <elementProp name="SECTION_ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SECTION_ID</stringProp>
                    <stringProp name="Argument.value">129</stringProp>
                  </elementProp>
                  <elementProp name="save_product_review" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">save_product_review</stringProp>
                    <stringProp name="Argument.value">Y</stringProp>
                  </elementProp>
                  <elementProp name="preview_comment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">preview_comment</stringProp>
                    <stringProp name="Argument.value">N</stringProp>
                  </elementProp>
                  <elementProp name="fm_edit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">fm_edit</stringProp>
                  </elementProp>
                  <elementProp name="sessid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessid</stringProp>
                  </elementProp>
                  <elementProp name="REVIEW_TEXT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">REVIEW_TEXT</stringProp>
                    <stringProp name="Argument.value">${__RandomString(32, ${alphabet})}</stringProp>
                  </elementProp>
                  <elementProp name="save" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">save</stringProp>
                    <stringProp name="Argument.value">Y</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${min_delay_write}</stringProp>
                <stringProp name="RandomTimer.range">${delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\etc\apache-jmeter-5.6.3\apache-jmeter-5.6.3\bin\VRT.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.BytesThroughputOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Bytes Throughput Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ConnectTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Connect Times Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseCodesPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Codes per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <com.github.johrstrom.listener.PrometheusListener guiclass="com.github.johrstrom.listener.gui.PrometheusListenerGui" testclass="com.github.johrstrom.listener.PrometheusListener" testname="Prometheus Listener" enabled="true">
        <collectionProp name="prometheus.collector_definitions">
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">response time summary  </stringProp>
            <stringProp name="collector.metric_name">jmeter_rt_summary</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="50511102">category</stringProp>
              <stringProp name="102727412">label</stringProp>
              <stringProp name="3059181">code</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.95,0.1|0.97,0.1|0.99,0.01</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">all code and count</stringProp>
            <stringProp name="collector.metric_name">jmeter_count_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="3059181">code</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">CountTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">success total</stringProp>
            <stringProp name="collector.metric_name">jmeter_success_total  </stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="50511102">category</stringProp>
              <stringProp name="102727412">label</stringProp>
              <stringProp name="3059181">code</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">success ratio</stringProp>
            <stringProp name="collector.metric_name">jmeter_success_ratio</stringProp>
            <stringProp name="collector.type">SUCCESS_RATIO</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1355093331">code  </stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessRatio</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">idle time  </stringProp>
            <stringProp name="collector.metric_name">jmeter_idle_time  </stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.95,0.1|0.97,0.1|0.99,0.01</stringProp>
            <stringProp name="listener.collector.measuring">IdleTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">failure total</stringProp>
            <stringProp name="collector.metric_name">jmeter_failure_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="50511102">category</stringProp>
              <stringProp name="102727412">label</stringProp>
              <stringProp name="3059181">code</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">FailureTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">response time counter</stringProp>
            <stringProp name="collector.metric_name">jmeter_rt_counter</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels"/>
            <stringProp name="collector.quantiles_or_buckets">0.95,0.1|0.97,0.1|0.99,0.01</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">latency summary</stringProp>
            <stringProp name="collector.metric_name">jmeter_latency_summary</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">100,500,1000,3000</stringProp>
            <stringProp name="listener.collector.measuring">Latency</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">connect time  </stringProp>
            <stringProp name="collector.metric_name">jmeter_connect_time  </stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.95,0.1|0.97,0.1|0.99,0.01</stringProp>
            <stringProp name="listener.collector.measuring">ConnectTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">responce size for sampler</stringProp>
            <stringProp name="collector.metric_name">jmeter_rsize</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">100,500,1000,3000</stringProp>
            <stringProp name="listener.collector.measuring">ResponseSize</stringProp>
          </elementProp>
        </collectionProp>
      </com.github.johrstrom.listener.PrometheusListener>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${SDW}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${VIEW_RESULT_TREE}</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
